---
- name: Установить зависимости для сборки Nginx
  apt:
    name:
      - build-essential
      - libpcre3
      - libpcre3-dev
      - zlib1g
      - zlib1g-dev
      - libssl-dev
      - wget
      - curl
    state: present
    update_cache: yes

- name: Скачать исходники Nginx
  get_url:
    url: "{{ nginx_src_url }}"
    dest: "/usr/local/src/nginx-{{ nginx_version }}.tar.gz"
    mode: '0644'

- name: Распаковать исходники Nginx
  unarchive:
    src: "/usr/local/src/nginx-{{ nginx_version }}.tar.gz"
    dest: "/usr/local/src/"
    remote_src: yes
    creates: "{{ nginx_src_dir }}"
- name: Скомпилировать и установить Nginx c путями как в deb-пакете
  shell: |
    cd {{ nginx_src_dir }} && \
    ./configure \
      --prefix=/etc/nginx \
      --conf-path=/etc/nginx/nginx.conf \
      --sbin-path=/usr/sbin/nginx \
      --pid-path=/var/run/nginx.pid \
      --lock-path=/var/lock/nginx.lock \
      --error-log-path=/var/log/nginx/error.log \
      --http-log-path=/var/log/nginx/access.log \
      --user={{ nginx_user }} \
      --group={{ nginx_user }} \
      --with-http_ssl_module \
      --with-http_v2_module && \
    make && make install
  args:
    creates: /usr/sbin/nginx

- name: Создать пользователя для Nginx
  user:
    name: "{{ nginx_user }}"
    shell: /usr/sbin/nologin
    system: yes
    create_home: no

- name: Создать systemd unit для Nginx (пути как в apt)
  copy:
    dest: /lib/systemd/system/nginx.service
    content: |
      # Stop dance for nginx
      # =======================
      #
      # ExecStop sends SIGQUIT (graceful stop) to the nginx process.
      # If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control
      # and sends SIGTERM (fast shutdown) to the main process.
      # After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends
      # SIGKILL to all the remaining processes in the process group (KillMode=mixed).
      #
      # nginx signals reference doc:
      # http://nginx.org/en/docs/control.html
      #
      [Unit]
      Description=A high performance web server and a reverse proxy server
      Documentation=man:nginx(8)
      After=network-online.target remote-fs.target nss-lookup.target
      Wants=network-online.target
      ConditionFileIsExecutable=/usr/sbin/nginx

      [Service]
      Type=forking
      PIDFile=/run/nginx.pid
      ExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;'
      ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'
      ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reload
      ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid
      TimeoutStopSec=5
      KillMode=mixed

      [Install]
      WantedBy=multi-user.target
    mode: '0644'

- name: Создать папки sites-available и sites-enabled
  file:
    path: "/etc/nginx/{{ item }}"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user }}"
    mode: '0755'
  loop:
    - sites-available
    - sites-enabled



- name: Перезагрузить systemd daemon
  systemd:
    daemon_reload: yes

- name: Запустить и включить Nginx
  systemd:
    name: nginx
    state: started
    enabled: yes

###############  GeoIP2  ###############
#Установим зависимости для GeoIP2

- name: Ensure nginx source tarball (matching playbook version)
  get_url:
    url: "https://nginx.org/download/nginx-{{ nginx_version }}.tar.gz"
    dest: "/usr/local/src/nginx-{{ nginx_version }}.tar.gz"
    mode: '0644'

- name: Ensure nginx source extracted
  unarchive:
    src: "/usr/local/src/nginx-{{ nginx_version }}.tar.gz"
    dest: "/usr/local/src/"
    remote_src: yes

- name: Clone ngx_http_geoip2_module
  git:
    repo: "https://github.com/leev/ngx_http_geoip2_module.git"
    dest: "/usr/local/src/ngx_http_geoip2_module"
    depth: 1
    force: yes

- name: Install dependencies for GeoIP2 and build tools
  apt:
    name:
      - libmaxminddb0
      - libmaxminddb-dev
      - mmdb-bin
      - gcc
      - make
      - automake
      - libtool
      - pkg-config
      - git
    state: present
    update_cache: yes

- name: Configure Nginx source for GeoIP2 dynamic module (under your prefix)
  shell: |
    ./configure \
      --prefix=/etc/nginx \
      --conf-path=/etc/nginx/nginx.conf \
      --sbin-path=/usr/sbin/nginx \
      --pid-path=/var/run/nginx.pid \
      --lock-path=/var/lock/nginx.lock \
      --error-log-path=/var/log/nginx/error.log \
      --http-log-path=/var/log/nginx/access.log \
      --user={{ nginx_user }} \
      --group={{ nginx_user }} \
      --with-http_ssl_module \
      --with-http_v2_module \
      --with-compat \
      --add-dynamic-module=../ngx_http_geoip2_module
  args:
    chdir: "{{ nginx_src_dir }}"

- name: Build GeoIP2 dynamic module
  command: make modules
  args:
    chdir: "{{ nginx_src_dir }}"

- name: Ensure /etc/nginx/modules exists
  file:
    path: /etc/nginx/modules
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Copy GeoIP2 dynamic module to nginx modules directory
  copy:
    src: "{{ nginx_src_dir }}/objs/ngx_http_geoip2_module.so"
    dest: "/etc/nginx/modules/ngx_http_geoip2_module.so"
    mode: '0644'
    remote_src: yes

- name: Install geoipupdate
  apt:
    name: geoipupdate
    state: present
    update_cache: yes
  tags: geoip2

- name: Place GeoIP.conf (вставь свои ключи)
  copy:
    dest: /etc/GeoIP.conf
    content: |
      AccountID 1201859
      LicenseKey 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
      EditionIDs GeoLite2-City GeoLite2-Country
  tags: geoip2

- name: Update GeoIP2 databases
  command: geoipupdate
  tags: geoip2

- name: List downloaded GeoIP2 mmdb files
  shell: ls -lh /var/lib/GeoIP/
  register: geoip2_db_list
  changed_when: false
  tags: geoip2

- name: Print GeoIP2 databases found
  debug:
    var: geoip2_db_list.stdout_lines
  tags: geoip2

- name: Ensure load_module line is in nginx.conf
  lineinfile:
    path: /etc/nginx/nginx.conf
    line: 'load_module modules/ngx_http_geoip2_module.so;'
    insertafter: BOF
    state: present

- name: Reload nginx to activate GeoIP2 module
  systemd:
    name: nginx
    state: reloaded
