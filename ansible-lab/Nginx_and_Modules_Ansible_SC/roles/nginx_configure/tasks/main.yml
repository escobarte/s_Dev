---
# 1. Вставляем строки для загрузки динамических модулей в nginx.conf (в начало файла)
- name: Ensure load_module lines in nginx.conf
  blockinfile:
    path: /etc/nginx/nginx.conf
    block: |
      load_module /usr/lib/nginx/modules/ngx_http_modsecurity_module.so;
      load_module /usr/lib/nginx/modules/ngx_http_geoip2_module.so;
    insertbefore: BOF
    marker: "# {mark} ANSIBLE LOAD MODULES"
  tags: nginxcfg

# 2. Копируем базовый конфиг ModSecurity (скачиваем рекомендованный шаблон)
- name: Create directory for ModSecurity config
  file:
    path: /etc/nginx/modsec
    state: directory
    mode: '0755'
  tags: nginxcfg

- name: Download modsecurity.conf-recommended
  get_url:
    url: https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended
    dest: /etc/nginx/modsec/modsecurity.conf
    mode: '0644'
  tags: nginxcfg

- name: Download unicode.mapping for ModSecurity
  get_url:
    url: https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping
    dest: /etc/nginx/modsec/unicode.mapping
    mode: '0644'
  tags: nginxcfg

# 3. Включаем режим блокировки (SecRuleEngine On) в конфиге ModSecurity
- name: Set SecRuleEngine to On in modsecurity.conf
  replace:
    path: /etc/nginx/modsec/modsecurity.conf
    regexp: 'SecRuleEngine\s+DetectionOnly'
    replace: 'SecRuleEngine On'
  tags: nginxcfg

# 4. Клонируем и настраиваем OWASP CRS (правила безопасности для ModSecurity)
- name: Clone OWASP CRS
  git:
    repo: "https://github.com/coreruleset/coreruleset.git"
    dest: /etc/nginx/modsec/owasp-crs
    depth: 1
  tags: nginxcfg

- name: Copy crs-setup.conf.example as crs-setup.conf
  copy:
    src: /etc/nginx/modsec/owasp-crs/crs-setup.conf.example
    dest: /etc/nginx/modsec/owasp-crs/crs-setup.conf
    remote_src: yes
  tags: nginxcfg

# 5. Добавляем include OWASP CRS в конец modsecurity.conf (чтобы правила подгружались)
- name: Include OWASP CRS in modsecurity.conf
  blockinfile:
    path: /etc/nginx/modsec/modsecurity.conf
    block: |
      Include /etc/nginx/modsec/owasp-crs/crs-setup.conf
      Include /etc/nginx/modsec/owasp-crs/rules/*.conf
    marker: "# {mark} ANSIBLE OWASP CRS"
    insertafter: EOF
  tags: nginxcfg

# 6. (Пример) Вставка geoip2-конфига и server{}-блока (только пример — можешь расширить по-своему)
- name: Insert GeoIP2 config in nginx.conf
  blockinfile:
    path: /etc/nginx/nginx.conf
    block: |
      geoip2 /var/lib/GeoIP/GeoLite2-Country.mmdb {
          $geoip2_data_country_code country iso_code;
      }
      geoip2 /var/lib/GeoIP/GeoLite2-City.mmdb {
          $geoip2_data_city_name      city names en;
          $geoip2_data_region_name    subdivisions 0 names en;
          $geoip2_latitude location latitude;
          $geoip2_longitude location longitude;
          $geoip2_postal_code  postal code;
          $geoip2_timezone     location time_zone;
      }
    marker: "# {mark} ANSIBLE GEOIP2 BLOCK"
    insertafter: "http {"
  tags: nginxcfg

# 6.1 Копирую laravel.lab.local.conf на сервер
- name: Copy laralvel.conf into sites-available
  copy:
     src: /mnt/d/s_dev_ops/ansible-lab/Nginx_and_Modules_Ansible_SC/laravel.lab.local.conf
     dest: /etc/nginx/sites-available/laravel.lab.local.conf
     owner: root
     group: root
     mode: '0644'
  tags: nginxcfg

- name: Remove defualt symlink if exists
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/defualt
    state: absent
  tags: nginxcfg

- name: Enable symlink laravel
  file:
    src: /etc/nginx/sites-available/laravel.lab.local.conf
    dest: /etc/nginx/sites-enabled/laravel.lab.local.conf
    state: link
  tags: nginxcfg

# 6.3 Nginx test and reload
- name: Nginx -t
  ansible.builtin.command: nginx -t
  register: nginx_test
  changed_when: false

- name: Systemctl reload nginx
  ansible.builtin.service:
   name: nginx
   state: reloaded
  when: nginx_test.rc == 0

# 7. Прописываем addheader в laravel conf
- name: Insert GeoIP2 headers in location / of laravel.lab.local.conf
  blockinfile:
    path: /etc/nginx/sites-available/laravel.lab.local.conf
    marker: "# {mark} ANSIBLE GEOIP2 HEADERS"
    block: |
      add_header X-Country-Code $geoip2_data_country_code;
      add_header X-City $geoip2_data_city_name;
      add_header X-Region $geoip2_data_region_name;
      add_header X-Latitude $geoip2_latitude;
      add_header X-Longitude $geoip2_longitude;
      add_header X-Postal $geoip2_postal_code;
      add_header X-Timezone $geoip2_timezone;
    insertafter: 'location / {'
  tags: nginxcfg

# 8. Проверяем конфиг и перезапускаем nginx
- name: Test nginx config
  command: nginx -t
  register: nginx_test
  ignore_errors: true
  tags: nginxcfg

- name: Fail if nginx config test failed
  fail:
    msg: "nginx -t failed! Check previous output."
  when: nginx_test.rc != 0
  tags: nginxcfg

- name: Reload nginx
  service:
    name: nginx
    state: reloaded
  tags: nginxcfg

