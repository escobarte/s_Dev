---
# Установка зависимостей для сборки модулей и самого nginx
- name: Install build dependencies
  apt:
    name:
      - git                  # Для клонирования репозиториев
      - g++                  # Компилятор C++
      - make                 # Сборщик проектов
      - automake             # Автоматизация сборки
      - libtool              # Поддержка создания библиотек
      - pkg-config           # Утилита для поиска библиотек
      - libpcre3-dev         # Для regexp в nginx
      - libxml2              # XML-парсер, нужен ModSecurity
      - libxml2-dev          # dev-пакет для сборки
      - libyajl-dev          # Для работы с JSON в ModSecurity
      - libcurl4-openssl-dev # Для HTTP/HTTPS запросов (ModSecurity)
      - libgeoip-dev         # Для geoip (старый, но иногда нужен)
      - liblmdb-dev          # Для быстрой работы с БД (ModSecurity)
      - libssl-dev           # Для поддержки SSL в nginx и модулях
      - libxml2-utils        # Утилиты XML (может понадобиться)
      - libpcre2-dev         # Для regexp (более новая версия)
      - build-essential      # Стандартный набор для сборки
      - gcc                  # C компилятор
      - zlib1g               # Архивация (gzip)
      - zlib1g-dev           # dev-пакет для сборки модулей
      - libmaxminddb0        # Для GeoIP2 (runtime)
      - libmaxminddb-dev     # Для GeoIP2 (build)
      - mmdb-bin             # Для работы с MaxMind .mmdb
    state: present
    update_cache: yes

# Install build nginx from Mainline Version 
- name: Ensure nginx source directory exists
  file:
    path: /usr/local/src/nginx
    state: directory
    owner: root
    group: root
    mode: '0755'
    
- name: Download nginx source tarball
  get_url:
    url: "https://nginx.org/download/nginx-{{ nginx_version }}.tar.gz"
    dest: "/usr/local/src/nginx-{{ nginx_version }}.tar.gz"
    mode: '0644'

- name: Extract nginx source tarball
  unarchive:
    src: "/usr/local/src/nginx-{{ nginx_version }}.tar.gz"
    dest: "/usr/local/src/nginx"
    remote_src: yes

- name: Configure nginx for build
  shell: |
    cd /usr/local/src/nginx-{{ nginx_version }} && \
    ./configure \
      --prefix=/etc/nginx \
      --sbin-path=/usr/sbin/nginx \
      --modules-path=/usr/lib/nginx/modules \
      --conf-path=/etc/nginx/nginx.conf \
      --error-log-path=/var/log/nginx/error.log \
      --http-log-path=/var/log/nginx/access.log \
      --pid-path=/var/run/nginx.pid \
      --lock-path=/var/lock/nginx.lock \
      --with-http_ssl_module \
      --with-http_v2_module \
      --with-http_gzip_static_module
  args:
    creates: "/usr/local/src/nginx-{{ nginx_version }}/objs/Makefile"

- name: Build nginx
  make:
    chdir: "/usr/local/src/nginx-{{ nginx_version }}"

- name: Install nginx
  make:
    chdir: "/usr/local/src/nginx-{{ nginx_version }}"
    target: install

- name: Check nginx version
  command: nginx -v
  register: nginx_version_check
  ignore_errors: true

- name: Print nginx version
  debug:
    msg: "{{ nginx_version_check.stderr }}"

- name: Create systemd unit file for nginx
  ansible.builtin.copy:
    dest: /lib/systemd/system/nginx.service
    owner: root
    group: root
    mode: '0644'
    content: |
        # Stop dance for nginx
        # =======================
        #
        # ExecStop sends SIGQUIT (graceful stop) to the nginx process.
        # If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control
        # and sends SIGTERM (fast shutdown) to the main process.
        # After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends
        # SIGKILL to all the remaining processes in the process group (KillMode=mixed).
        #
        # nginx signals reference doc:
        # http://nginx.org/en/docs/control.html
        #
        [Unit]
        Description=A high performance web server and a reverse proxy server
        Documentation=man:nginx(8)
        After=network-online.target remote-fs.target nss-lookup.target
        Wants=network-online.target
        ConditionFileIsExecutable=/usr/sbin/nginx

        [Service]
        Type=forking
        PIDFile=/run/nginx.pid
        ExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;'
        ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'
        ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reload
        ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid
        TimeoutStopSec=5
        KillMode=mixed

        [Install]
        WantedBy=multi-user.target

- name: Reload systemd to read new nginx unit
  ansible.builtin.command: systemctl daemon-reload

- name: Enable nginx service at boot
  ansible.builtin.systemd:
    name: nginx
    enabled: yes

- name: Start nginx service
  ansible.builtin.systemd:
    name: nginx
    state: started

# Проверяем, что nginx установлен и выводим его версию
- name: Show nginx version
  command: nginx -v
  register: nginx_version
  ignore_errors: yes  # чтобы не валился, если nginx не стартует

- name: Print nginx version output
  debug:
    msg: "{{ nginx_version.stderr }}"
