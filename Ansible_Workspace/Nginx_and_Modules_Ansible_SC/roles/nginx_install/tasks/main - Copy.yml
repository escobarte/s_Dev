---
vars:
  nginx_files_to_copy:
  - { src: "/mnt/d/s_dev_ops/ansible-lab/Nginx_Legacy_Conf/fastcgi_params", dest: "/etc/nginx/fastcgi_params"}
  - { src: "/mnt/d/s_dev_ops/ansible-lab/Nginx_Legacy_Conf/mime.types", dest: "/etc/nginx/mime.types"}
  - { src: "/mnt/d/s_dev_ops/ansible-lab/Nginx_Legacy_Conf/nginx.conf", dest: "/etc/nginx/nginx.conf"}
  - { src: "/mnt/d/s_dev_ops/ansible-lab/Nginx_Legacy_Conf/proxy_params", dest: "/etc/nginx/proxy_params"}
  - { src: "/mnt/d/s_dev_ops/ansible-lab/Nginx_Legacy_Conf/scgi_params", dest: "/etc/nginx/scgi_params"}
  - { src: "/mnt/d/s_dev_ops/ansible-lab/Nginx_Legacy_Conf/sites-available/", dest: "/etc/nginx/sites-available/"}
  - { src: "/mnt/d/s_dev_ops/ansible-lab/Nginx_Legacy_Conf/sites-enabled/", dest: "/etc/nginx/sites-enabled/"}
  - { src: "/mnt/d/s_dev_ops/ansible-lab/Nginx_Legacy_Conf/snippets/", dest: "/etc/nginx/snippets/"}
  - { src: "/mnt/d/s_dev_ops/ansible-lab/Nginx_Legacy_Conf/uwsgi_params", dest: "/etc/nginx/uwsgi_params"}
  
# Установка зависимостей для сборки модулей и самого nginx
- name: Install build dependencies
  apt:
    name:
      - git                  # Для клонирования репозиториев
      - g++                  # Компилятор C++
      - make                 # Сборщик проектов
      - automake             # Автоматизация сборки
      - libtool              # Поддержка создания библиотек
      - pkg-config           # Утилита для поиска библиотек
      - libpcre3-dev         # Для regexp в nginx
      - libxml2              # XML-парсер, нужен ModSecurity
      - libxml2-dev          # dev-пакет для сборки
      - libyajl-dev          # Для работы с JSON в ModSecurity
      - libcurl4-openssl-dev # Для HTTP/HTTPS запросов (ModSecurity)
      - libgeoip-dev         # Для geoip (старый, но иногда нужен)
      - liblmdb-dev          # Для быстрой работы с БД (ModSecurity)
      - libssl-dev           # Для поддержки SSL в nginx и модулях
      - libxml2-utils        # Утилиты XML (может понадобиться)
      - libpcre2-dev         # Для regexp (более новая версия)
      - build-essential      # Стандартный набор для сборки
      - gcc                  # C компилятор
      - zlib1g               # Архивация (gzip)
      - zlib1g-dev           # dev-пакет для сборки модулей
      - libmaxminddb0        # Для GeoIP2 (runtime)
      - libmaxminddb-dev     # Для GeoIP2 (build)
      - mmdb-bin             # Для работы с MaxMind .mmdb
    state: present
    update_cache: yes

# Install build nginx from Mainline Version 
- name: Download nginx source tarball
  get_url:
    url: "https://nginx.org/download/nginx-1.28.0.tar.gz"
    dest: "/usr/local/src/nginx-1.28.0.tar.gz"
    mode: '0644'

- name: Extract nginx source tarball
  unarchive:
    src: "/usr/local/src/nginx-1.28.0.tar.gz"
    dest: "/usr/local/src/"
    remote_src: yes

- name: Configure nginx for build
  shell: |
    cd /usr/local/src/nginx-1.28.0 && \
    ./configure \
      --prefix=/usr \
      --sbin-path=/usr/sbin/nginx \
      --conf-path=/etc/nginx/nginx.conf \
      --modules-path=/usr/lib/nginx/modules \
      --with-compat \
      --with-http_ssl_module \
      --with-http_v2_module
  args:
    creates: "/usr/local/src/nginx-1.28.0/objs/Makefile"

- name: Build nginx
  make:
    chdir: "/usr/local/src/nginx-1.28.0"

- name: Install nginx
  make:
    chdir: "/usr/local/src/nginx-1.28.0"
    target: install

- name: Check nginx version
  command: nginx -v
  register: nginx_version_check
  ignore_errors: true

- name: Print nginx version
  debug:
    msg: "{{ nginx_version_check.stderr }}"



# Проверяем, что nginx установлен и выводим его версию
- name: Show nginx version
  command: nginx -v
  register: nginx_version
  ignore_errors: yes  # чтобы не валился, если nginx не стартует

- name: Print nginx version output
  debug:
    msg: "{{ nginx_version.stderr }}"

# Копируем конфини из версии Legaxy 1.24.0, они были заранее загатовленны
- name: Copy configs from Legacy 1.24.0
  ansbile.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0644'
    force: yes
  loop: "{{ nginx_files_to_copy }}"