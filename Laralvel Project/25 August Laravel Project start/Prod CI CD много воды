Отлично. Делаем **Prod (CI/CD)** так же по-шагово и мелко. Начнём с минимального скелета: **два образа** (PHP-FPM с кодом и зависимостями, Nginx с `public/`) + пайплайн, который их **собирает и пушит** в GitLab Container Registry. Деплой сделаем позже отдельным шагом.

---

## Шаг B1 — добавим в репо `Dockerfile.php` (многостадийный, собирает vendor и копирует код)

**Суть:** итоговый образ `app-php` на базе `php:8.3-fpm-alpine`, внутри уже `vendor/` и весь код.
(Фронт-ассеты добавим к Nginx на следующем шаге.)

Создай в **корне репозитория** файл `Dockerfile.php` с содержимым:

```dockerfile
# -------- База с расширениями PHP (общая для стадий) --------
FROM php:8.3-fpm-alpine AS php-base

# Система + заголовки для сборки расширений
RUN apk add --no-cache \
    bash git curl unzip icu-libs oniguruma libxml2 libzip \
    libpng libjpeg-turbo libwebp freetype \
 && apk add --no-cache --virtual .build-deps \
    build-base icu-dev oniguruma-dev libxml2-dev libzip-dev zlib-dev \
    libpng-dev libjpeg-turbo-dev libwebp-dev freetype-dev

# PHP-расширения, нужные Laravel
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
 && docker-php-ext-install -j"$(nproc)" pdo_mysql mbstring exif pcntl bcmath gd intl zip \
 && apk del --no-network .build-deps

WORKDIR /var/www/html

# -------- Стадия vendor (Composer install) --------
FROM php-base AS vendor
# кладём только composer-файлы для эффективного кэша
COPY composer.json composer.lock ./
# ставим Composer
RUN curl -sS https://getcomposer.org/installer | php \
 && mv composer.phar /usr/local/bin/composer
# устанавливаем прод-зависимости
RUN COMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --prefer-dist --no-interaction --no-ansi --no-progress

# -------- Итоговый образ приложения (PHP-FPM + код + vendor) --------
FROM php-base AS app
WORKDIR /var/www/html
# копируем исходники приложения
COPY . .
# копируем vendor из стадии vendor
COPY --from=vendor /var/www/html/vendor ./vendor

# Права для runtime директорий (php-fpm юзер www-data)
RUN mkdir -p storage/framework/{cache,sessions,testing,views} bootstrap/cache \
 && chown -R www-data:www-data storage bootstrap/cache

# Не кэшируем конфиг на этапе сборки (на проде сделаем при старте/деплое)
# CMD задан образами PHP-FPM по умолчанию
```

**Чек-вопросы:**

1. Файл `Dockerfile.php` добавил(а) в **корень репо**?
2. Видишь в нём три стадии: `php-base`, `vendor`, `app`?

---

## Шаг B2 — добавим `Dockerfile.nginx` (образ `app-nginx` c `public/` и конфигом)

**Суть:** Nginx-образ будет содержать **только папку `public/`** (включая `index.php` и собранные ассеты) и наш конфиг.

Создай файл `Dockerfile.nginx` в **корне репо**:

```dockerfile
FROM nginx:alpine

# наш prod-конфиг (root=/var/www/html/public; fastcgi_pass php:9000)
COPY nginx/default.conf /etc/nginx/conf.d/default.conf

# копируем ПАПКУ public (index.php, картинки, css/js, favicon и т.д.)
# важно: сюда попадут и файлы, созданные билдом Vite (public/build)
COPY public /var/www/html/public
```

> Важно: к моменту сборки **в репо** уже должна существовать папка `public/build` (после `npm run build`). Этим займёмся в пайплайне.

**Чек-вопросы:**
3\) Создал(а) `Dockerfile.nginx` в корне репо?
4\) Внутри него строка `COPY public /var/www/html/public` на месте?

---

## Шаг B3 — минимальный `.gitlab-ci.yml` (пока без деплоя)

Сейчас сделаем 2 джоба:

* `assets` — собирает фронт (Vite) и сохраняет `public/build` как артефакт;
* `build_images` — на основе артефакта собирает и пушит **два образа**: `app-php` и `app-nginx`.

Добавь `.gitlab-ci.yml` в корень репо:

```yaml
stages: [assets, build]

# 1) Собираем фронт и сохраняем public/build как артефакт
assets:
  stage: assets
  image: node:20-alpine
  before_script:
    - node -v && npm -v
  script:
    - npm ci || npm install
    - npm run build
  artifacts:
    paths:
      - public/build
    expire_in: 1 week
  only:
    - branches

# 2) Строим и пушим docker-образы в GitLab Registry
build_images:
  stage: build
  image: docker:27.0 # или актуальная
  services:
    - docker:27.0-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    # тегируем коротким SHA и latest для удобства
    - export TAG="$CI_COMMIT_SHORT_SHA"
    # app-php
    - docker build -f Dockerfile.php -t "$CI_REGISTRY_IMAGE/app-php:$TAG" -t "$CI_REGISTRY_IMAGE/app-php:latest" .
    - docker push "$CI_REGISTRY_IMAGE/app-php:$TAG"
    - docker push "$CI_REGISTRY_IMAGE/app-php:latest"
    # app-nginx (использует артефакт public/build, загруженный GitLab'ом)
    - docker build -f Dockerfile.nginx -t "$CI_REGISTRY_IMAGE/app-nginx:$TAG" -t "$CI_REGISTRY_IMAGE/app-nginx:latest" .
    - docker push "$CI_REGISTRY_IMAGE/app-nginx:$TAG"
    - docker push "$CI_REGISTRY_IMAGE/app-nginx:latest"
  needs: ["assets"]
  only:
    - branches
```

Требования:

* В проекте GitLab должен быть включён **Container Registry**.
* Никаких секретов добавлять не нужно: `$CI_REGISTRY`, `$CI_REGISTRY_IMAGE`, `$CI_REGISTRY_USER`, `$CI_JOB_TOKEN` — уже есть в CI.

**Чек-вопросы:**
5\) В проекте включён **Container Registry**? (Settings → General → Visibility → Container Registry)
6\) Добавил(а) `.gitlab-ci.yml` как выше?
7\) Запустился пайплайн и **оба образа** успешно запушились? (видно в **Packages & Registries → Container Registry** два репозитория: `app-php` и `app-nginx`)

---

## Что дальше (не делаем пока)

* **B4 (деплой):** создадим `compose.prod.yaml`, где **image** у `web` — `app-nginx:TAG`, у `php` — `app-php:TAG`, без bind-mount’ов;
* **B5 (deploy job):** job `deploy` с SSH на сервер, который делал бы:

  * `docker login $CI_REGISTRY`
  * `docker compose -f compose.prod.yaml pull && docker compose -f compose.prod.yaml up -d`
* **B6 (migrate job):** отдельный job `migrate` (после деплоя):
  `docker compose -f compose.prod.yaml exec -T php php artisan migrate --force`

Сначала добьём шаги B1–B3. Отпиши ответы на 1–7. Если что-то падает — поправим точечно.
