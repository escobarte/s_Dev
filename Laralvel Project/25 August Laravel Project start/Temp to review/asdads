Что такое CI/CD — простая картинка

Представь кухню.

Dev-режим = готовишь у себя на кухне: берёшь сырой код с Git (git clone), ставишь пакеты (composer, npm), пробуешь блюдо (локально/на тестовом сервере).
Тут мы и делали docker compose up, монтировали ./src, гоняли composer install, npm run build.

CI/CD = конвейер на фабрике:
Каждый раз, когда ты кладёшь новый рецепт в коробку (делаешь git push),
CI сам:

берёт код (git clone делает Runner, не прод-сервер),

ставит пакеты (composer, npm),

проверяет (тесты),

запекает готовые образы Docker (как банки с уже готовым соусом),

складывает их в хранилище (Registry).

CD потом:
6) приезжает на ресторан (твой прод-сервер),
7) просто забирает готовые банки из Registry (docker compose pull)
8) и включает сервисы (docker compose up -d).
На прод-сервере ничего не компилим и не git clone — только берём готовое.

Где что происходит (по пунктам)

git clone:
— Dev: у тебя/на тестовом сервере руками.
— CI/CD: внутри CI Runner автоматически. На прод-сервере не делаем.

composer install / npm run build:
— Dev: руками (мы делали в контейнере php и node).
— CI: в пайплайне; результат пакуем в Docker-образы.

Vite (assets):
— Dev: npm run build → public/build/manifest.json.
— CI: делает то же и кладёт файлы в образ nginx.

APP_KEY (php artisan key:generate):
— Генерим один раз для окружения и сохраняем в .env на сервере.
— На каждом деплое не трогаем (чтобы не «сломать» шифрования/сессии).
— Секреты (.env) лежат на сервере, не в Git, не в образах.

Миграции (php artisan migrate --force):
— Запускаем после деплоя на сервере, отдельным шагом/джобом.
— Сиды — обычно только для dev/staging, на проде редко.