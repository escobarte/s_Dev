# sergiu.cusnir pipeline
# Определяем этапы нашего пайплайна
stages:
  - build      # Собираем Docker образ
  - test       # Тестируем что всё работает
  - deploy     # Разворачиваем на сервере

# Переменные для всего пайплайна
variables:
  # Имя образа с тегом по коммиту
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  # Образ с тегом "latest"
  DOCKER_LATEST: $CI_REGISTRY_IMAGE:latest
  # Включаем возможность использовать Docker внутри Docker
  DOCKER_TLS_CERTDIR: "/certs"

# Этап 1: Сборка Docker образа
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    # Логинимся в GitLab Container Registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Собираем production образ..."
    - docker build -f Dockerfile.prod -t $DOCKER_IMAGE .
    - docker tag $DOCKER_IMAGE $DOCKER_LATEST
    
    - echo "Отправляем образ в registry..."
    - docker push $DOCKER_IMAGE
    - docker push $DOCKER_LATEST
    
    - echo "Сборка завершена! Образ: $DOCKER_IMAGE"
  only:
    - main  # Запускаем только для ветки main

# Этап 2: Тестирование
test:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "Скачиваем собранный образ..."
    - docker pull $DOCKER_IMAGE
    
    - echo "Запускаем тестовый контейнер..."
    - docker run -d --name test-container -p 8080:80 $DOCKER_IMAGE
    
    - echo "Ждём 10 секунд пока приложение запустится..."
    - sleep 10
    
    - echo "Тестируем что сайт отвечает..."
    - docker exec test-container curl -f http://localhost:80/ || exit 1
    
    - echo "Проверяем что artisan работает..."
    - docker exec test-container php artisan --version
    
    - echo "Останавливаем тестовый контейнер..."
    - docker stop test-container
    - docker rm test-container
    
    - echo "Тесты прошли успешно!"
  needs:
    - build  # Этот этап запустится только после успешной сборки
  only:
    - main

# Этап 3: Деплой на сервер
deploy:
  stage: deploy
  tags:
    - shell  # Используем наш shell runner на сервере 10.100.93.6
  script:
    - echo "Начинаем деплой на production сервер..."
    
    # Логинимся в registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    
    # Скачиваем свежий образ
    - docker pull $DOCKER_IMAGE
    
    # Останавливаем старый контейнер если он есть
    - docker stop laravel-blog-prod || true
    - docker rm laravel-blog-prod || true
    
    # Запускаем новый контейнер
    - docker run -d --name laravel-blog-prod --restart unless-stopped -p 8080:80 $DOCKER_IMAGE
    
    # Проверяем что всё запустилось
    - sleep 5
    - docker ps | grep laravel-blog-prod
    
    - echo "Деплой завершён! Сайт доступен на http://10.100.93.6:8080"
  needs:
    - build
    - test
  only:
    - main
  when: manual  # Запускаем деплой только вручную для безопасности
