# ──────────────────────────────────────────────────────────────────────────────
# .gitlab-ci.yml
# ──────────────────────────────────────────────────────────────────────────────
variables:
  DEBIAN_FRONTEND: noninteractive

stages: [bootstrap, deploy]

bootstrap:
  stage: bootstrap
  tags: ["n1-laravel"]
  when: manual
  script:
    - if command -v sudo >/dev/null 2>&1; then SUDO="sudo -n"; else SUDO=""; fi
    - $SUDO apt-get update && $SUDO apt-get install -y ansible
    - ansible-galaxy collection install community.general
    - ansible-playbook -i "localhost," -c local ansible/bootstrap.yml

deploy:
  stage: deploy
  tags: ["n1-laravel"]
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|main)$/'
  environment:
    name: production
    url: "http://10.100.93.6"
  script:
    - if command -v sudo >/dev/null 2>&1; then SUDO="sudo -n"; else SUDO=""; fi
    - $SUDO apt-get update && $SUDO apt-get install -y ansible
    - ansible-galaxy collection install community.general
    - ansible-playbook -i "localhost," -c local ansible/deploy.yml

# ──────────────────────────────────────────────────────────────────────────────
# ansible/requirements.yml
# ──────────────────────────────────────────────────────────────────────────────
---
collections:
  - name: community.general

# ──────────────────────────────────────────────────────────────────────────────
# ansible/deploy.yml
# ──────────────────────────────────────────────────────────────────────────────
---
- name: Deploy Laravel app
  hosts: localhost
  gather_facts: false
  become: true
  vars:
    repo_url: "https://github.com/guillaumebriday/laravel-blog.git"
    deploy_dir: "/var/www/app02"
    php_ver: "8.4"
    web_user: "www-data"
    web_group: "www-data"
    app_url: "{{ lookup('env','APP_URL') | default('http://10.100.93.6', true) }}"
    app_env: "{{ lookup('env','APP_ENV') | default('production', true) }}"
    app_key: "{{ lookup('env','APP_KEY') | default('', true) }}"
    app_debug: "{{ lookup('env','APP_DEBUG') | default('false', true) }}"
    db_host: "{{ lookup('env','DB_HOST') }}"
    db_port: "{{ lookup('env','DB_PORT') | default('3306', true) }}"
    db_database: "{{ lookup('env','DB_DATABASE') }}"
    db_username: "{{ lookup('env','DB_USERNAME') }}"
    db_password: "{{ lookup('env','DB_PASSWORD') }}"
    repo_ref: "{{ lookup('env','REPO_REF') | default('', true) }}"

  pre_tasks:
    - name: Ensure NodeSource repo present (idempotent)
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
      args:
        executable: /bin/bash
        creates: /etc/apt/sources.list.d/nodesource.list

    - name: Ensure packages present (safety net)
      apt:
        name:
          - git
          - apache2
          - "libapache2-mod-php{{ php_ver }}"
          - "php{{ php_ver }}"
          - "php{{ php_ver }}-cli"
          - "php{{ php_ver }}-bcmath"
          - "php{{ php_ver }}-xml"
          - "php{{ php_ver }}-mbstring"
          - "php{{ php_ver }}-curl"
          - "php{{ php_ver }}-zip"
          - "php{{ php_ver }}-mysql"
          - composer
          - nodejs
        state: present
        update_cache: yes

  tasks:
    - name: Check if deploy dir is a git repo
      stat:
        path: "{{ deploy_dir }}/.git"
      register: gitdir

    - name: Reset deploy dir if not a git repo
      file:
        path: "{{ deploy_dir }}"
        state: absent
      when: not gitdir.stat.exists

    - name: Create deploy dir with setgid
      file:
        path: "{{ deploy_dir }}"
        state: directory
        owner: "{{ web_user }}"
        group: "{{ web_group }}"
        mode: "2775"

    - name: Allow repo path for git (system-wide, for safety)
      command: git config --system --add safe.directory {{ deploy_dir }}
      ignore_errors: true

    - name: Checkout repository (default branch or REPO_REF)
      become_user: "{{ web_user }}"
      git:
        repo: "{{ repo_url }}"
        dest: "{{ deploy_dir }}"
        version: "{{ (repo_ref | length > 0) | ternary(repo_ref, omit) }}"
        force: yes
        accept_hostkey: yes

    - name: Ensure ownership of the code
      file:
        path: "{{ deploy_dir }}"
        state: directory
        recurse: yes
        owner: "{{ web_user }}"
        group: "{{ web_group }}"

    - name: Place .env from template
      template:
        src: templates/env.laravel.j2
        dest: "{{ deploy_dir }}/.env"
        owner: "{{ web_user }}"
        group: "{{ web_group }}"
        mode: "0640"

    - name: Ensure storage and cache perms
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ web_user }}"
        group: "{{ web_group }}"
        mode: "2775"
      loop:
        - "{{ deploy_dir }}/storage"
        - "{{ deploy_dir }}/bootstrap/cache"

    - name: Composer install (no-dev, optimized)
      become_user: "{{ web_user }}"
      community.general.composer:
        command: install
        working_dir: "{{ deploy_dir }}"
        no_dev: true
        prefer_dist: true
        no_interaction: true
        optimize_autoloader: true
      environment:
        COMPOSER_ALLOW_SUPERUSER: "1"

    - name: Generate APP_KEY if not provided
      command: "php artisan key:generate --force"
      args:
        chdir: "{{ deploy_dir }}"
      when: app_key == ""
      become_user: "{{ web_user }}"

    - name: Storage symlink (idempotent)
      command: "php artisan storage:link"
      args:
        chdir: "{{ deploy_dir }}"
      become_user: "{{ web_user }}"
      register: storage_link
      changed_when: "'The [public/storage] directory already exists' not in storage_link.stderr | default('')"

    - name: Run migrations (force)
      command: "php artisan migrate --force"
      args:
        chdir: "{{ deploy_dir }}"
      become_user: "{{ web_user }}"

    - name: Install Node deps
      community.general.npm:
        path: "{{ deploy_dir }}"
      become_user: "{{ web_user }}"

    - name: Build assets
      command: "npm run build"
      args:
        chdir: "{{ deploy_dir }}"
      become_user: "{{ web_user }}"

    - name: Ensure Apache modules enabled
      command: "a2enmod {{ item }}"
      loop:
        - "php{{ php_ver }}"
        - rewrite
        - headers
        - env
      register: a2mods
      changed_when: "'already enabled' not in a2mods.stdout | default('')"

    - name: Place Apache vhost
      template:
        src: templates/apache_vhost.conf.j2
        dest: /etc/apache2/sites-available/app02.conf
        mode: "0644"
      notify: Reload Apache

    - name: Enable site and disable default
      shell: |
        a2dissite 000-default.conf || true
        a2ensite app02.conf
      args:
        warn: false
      notify: Reload Apache

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

# ──────────────────────────────────────────────────────────────────────────────
# ansible/templates/env.laravel.j2
# ──────────────────────────────────────────────────────────────────────────────
APP_NAME=Laravel
APP_ENV={{ app_env }}
APP_KEY={{ app_key }}
APP_DEBUG={{ app_debug }}
APP_URL={{ app_url }}
LOG_CHANNEL=stack

DB_CONNECTION=mysql
DB_HOST={{ db_host }}
DB_PORT={{ db_port }}
DB_DATABASE={{ db_database }}
DB_USERNAME={{ db_username }}
DB_PASSWORD={{ db_password }}

# Cache/Queue/Session can be customized later
CACHE_DRIVER=file
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

# ──────────────────────────────────────────────────────────────────────────────
# ansible/templates/apache_vhost.conf.j2
# ──────────────────────────────────────────────────────────────────────────────
<VirtualHost *:80>
    ServerName {{ (app_url | regex_replace('^https?://', '')) | default('10.100.93.6') }}
    DocumentRoot {{ deploy_dir }}/public

    <Directory {{ deploy_dir }}/public>
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/app02_error.log
    CustomLog ${APACHE_LOG_DIR}/app02_access.log combined

    # Pass Authorization header
    SetEnvIf Authorization .+ HTTP_AUTHORIZATION=$0
</VirtualHost>