# Этап 1: Собираем фронтенд (JavaScript/CSS)
FROM node:20-alpine AS node-builder
WORKDIR /app
COPY src/package*.json ./
RUN npm ci --only=production
COPY src/ ./
RUN npm run build

# Этап 2: Базовый PHP образ с расширениями
FROM php:8.3-fpm-alpine AS php-base
RUN apk add --no-cache \
    bash git curl unzip icu-libs oniguruma libxml2 libzip \
    libpng libjpeg-turbo libwebp freetype nginx supervisor \
    && apk add --no-cache --virtual .build-deps \
    build-base icu-dev oniguruma-dev libxml2-dev libzip-dev zlib-dev \
    libpng-dev libjpeg-turbo-dev libwebp-dev freetype-dev

RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
 && docker-php-ext-install -j"$(nproc)" \
    pdo_mysql mbstring exif pcntl bcmath gd intl zip \
 && apk del --no-network .build-deps

# Устанавливаем Composer
RUN curl -sS https://getcomposer.org/installer | php \
 && mv composer.phar /usr/local/bin/composer

# Этап 3: Финальный образ приложения
FROM php-base AS app
WORKDIR /var/www/html

# Копируем исходный код Laravel
COPY src/ ./

# Устанавливаем PHP зависимости (только для production)
RUN COMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader --no-interaction

# Копируем собранные фронтенд файлы из первого этапа
COPY --from=node-builder /app/public/build ./public/build

# Создаём необходимые папки и настраиваем права
RUN mkdir -p storage/framework/{cache,sessions,testing,views} bootstrap/cache \
    && chown -R www-data:www-data storage bootstrap/cache \
    && chmod -R 775 storage bootstrap/cache

# Копируем конфигурацию nginx для работы внутри контейнера
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Копируем конфигурацию supervisor (для управления процессами)
COPY docker/supervisord.conf /etc/supervisord.conf

# Копируем стартовый скрипт
COPY docker/start.sh /start.sh
RUN chmod +x /start.sh

EXPOSE 80

CMD ["/start.sh"]
