# Указываем пользователя от имени которого будут запущены worker процессы Nginx
# www-data - стандартный пользователь для веб-серверов с минимальными правами
user www-data;

# Количество worker процессов
# auto - Nginx автоматически определит оптимальное количество на основе числа CPU ядер
worker_processes auto;

# Путь к файлу с PID главного процесса Nginx
# PID используется для управления сервером (остановка, перезагрузка и т.д.)
pid /var/run/nginx.pid;

# Блок настроек событийной модели (как Nginx обрабатывает соединения)
events {
    # Максимальное количество одновременных соединений на один worker процесс
    # При worker_processes=2 максимум соединений будет 2048 (2 × 1024)
    worker_connections 1024;
}

# Основной блок HTTP настроек
http {
    # Подключаем файл с MIME типами (определяет тип контента по расширению файла)
    # Например: .jpg → image/jpeg, .css → text/css
    include /etc/nginx/mime.types;
    
    # MIME тип по умолчанию для неизвестных файлов
    # application/octet-stream означает "бинарные данные"
    default_type application/octet-stream;

    # Путь к файлу логов доступа (кто, когда и что запрашивал)
    access_log /var/log/nginx/access.log;
    
    # Путь к файлу логов ошибок
    error_log /var/log/nginx/error.log;

    # Включаем sendfile - эффективная передача файлов на уровне ядра
    # Файл передается напрямую из диска в сокет без копирования в userspace
    sendfile on;
    
    # Оптимизация TCP: отправляем заголовки и начало файла в одном пакете
    tcp_nopush on;
    
    # Отключаем алгоритм Nagle - отправляем мелкие пакеты сразу
    # Важно для интерактивных приложений
    tcp_nodelay on;
    
    # Время жизни keep-alive соединения в секундах
    # Клиент может переиспользовать соединение для нескольких запросов
    keepalive_timeout 65;
    
    # Максимальный размер хеш-таблицы для MIME типов
    # Увеличиваем если много кастомных типов файлов
    types_hash_max_size 2048;

    # Блок настроек виртуального хоста (сайта)
    server {
        # Слушаем на порту 80 (стандартный HTTP порт)
        listen 80;
        
        # Имя сервера. "_" означает "любое имя" (catch-all)
        # Этот блок сработает для любого домена
        server_name _;
        
        # Корневая директория сайта
        # Nginx будет искать файлы в этой папке
        root /var/www/html/public;
        
        # Файлы индекса по умолчанию (в порядке приоритета)
        # Если запрос к папке, Nginx попробует найти эти файлы
        index index.php index.html;

        # Обработчик для всех запросов (главный роутер)
        location / {
            # Пытаемся найти файл или папку по URI
            # Если не найдем - перенаправляем на index.php с параметрами
            # Это стандартная схема для Laravel/фреймворков с единой точкой входа
            try_files $uri $uri/ /index.php?$query_string;
        }

        # Обработчик для всех .php файлов
        location ~ \.php$ {
            # Подключаем стандартные FastCGI параметры
            include fastcgi_params;
            
            # Указываем полный путь к PHP скрипту
            # $document_root = /var/www/html/public
            # $fastcgi_script_name = /index.php (например)
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            
            # Адрес PHP-FPM процесса для обработки PHP кода
            # 127.0.0.1:9000 - локальный адрес где слушает PHP-FPM
            fastcgi_pass 127.0.0.1:9000;
            
            # Индексный файл для PHP
            fastcgi_index index.php;
            
            # Таймаут чтения ответа от PHP-FPM (5 минут)
            # Полезно для долгих PHP скриптов
            fastcgi_read_timeout 300;
        }

        # Блокируем доступ к скрытым файлам (.env, .git и т.д.)
        # \.(?!well-known) - регулярное выражение: точка + любой символ, 
        # но НЕ "well-known" (нужно для Let's Encrypt сертификатов)
        location ~ /\.(?!well-known) {
            deny all;  # Запрещаем доступ ко всем таким файлам
        }

        # Кеширование статических файлов
        # Регулярное выражение для расширений: css, gif, ico, jpeg, jpg, js, png
        location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
            # Устанавливаем срок годности кеша на 1 год
            expires 1y;
            
            # Добавляем заголовок Cache-Control
            # public - файл может кешироваться прокси-серверами
            # immutable - файл никогда не изменится (можно не проверять обновления)
            add_header Cache-Control "public, immutable";
        }
    }
}