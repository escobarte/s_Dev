# Этап 1: Собираем фронтенд (JavaScript/CSS)
# Используем легкий образ Node.js версии 20 на базе Alpine Linux для сборки фронтенда
FROM node:20-alpine AS node-builder

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем только файлы package.json и package-lock.json для установки зависимостей
# Это делается отдельно для использования кэширования Docker слоев
COPY src/package*.json ./

# Устанавливаем только production зависимости npm (без devDependencies)
RUN npm ci --only=production

# Копируем весь исходный код фронтенда
COPY src/ ./

# Запускаем сборку фронтенда (компиляция JS, CSS, минификация и т.д.)
RUN npm run build

# Этап 2: Базовый PHP образ с расширениями
# Используем официальный образ PHP 8.3 с FPM на базе Alpine Linux
FROM php:8.3-fpm-alpine AS php-base

# Устанавливаем системные пакеты без кэша для уменьшения размера образа
# Основные пакеты: bash, git, curl, unzip - утилиты для работы
# Библиотеки: icu-libs, oniguruma, libxml2 и др. - для PHP расширений
# nginx - веб-сервер, supervisor - менеджер процессов
RUN apk add --no-cache \
   bash git curl unzip icu-libs oniguruma libxml2 libzip \
   libpng libjpeg-turbo libwebp freetype nginx supervisor \
   # Устанавливаем build зависимости во временную группу для последующего удаления
   && apk add --no-cache --virtual .build-deps \
   build-base icu-dev oniguruma-dev libxml2-dev libzip-dev zlib-dev \
   libpng-dev libjpeg-turbo-dev libwebp-dev freetype-dev

# Настраиваем расширение GD для работы с изображениями (поддержка форматов)
# Устанавливаем PHP расширения: БД, строки, файлы, математика, изображения и интернационализация
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
&& docker-php-ext-install -j"$(nproc)" \
   pdo_mysql mbstring exif pcntl bcmath gd intl zip \
# Удаляем build зависимости для уменьшения размера финального образа
&& apk del --no-network .build-deps

# Скачиваем и устанавливаем Composer (менеджер зависимостей PHP)
RUN curl -sS https://getcomposer.org/installer | php \
# Перемещаем исполняемый файл в системную директорию
&& mv composer.phar /usr/local/bin/composer

# Этап 3: Финальный образ приложения
# Наследуемся от базового PHP образа с уже установленными расширениями
FROM php-base AS app

# Устанавливаем рабочую директорию для Laravel приложения
WORKDIR /var/www/html

# Копируем весь исходный код Laravel приложения
COPY src/ ./

# Устанавливаем PHP зависимости через Composer
# --no-dev: исключаем dev зависимости для production
# --optimize-autoloader: оптимизируем автозагрузчик для лучшей производительности
# --no-interaction: запускаем без интерактивных вопросов
# COMPOSER_ALLOW_SUPERUSER=1: разрешаем запуск от root (для Docker)
RUN COMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader --no-interaction

# Копируем собранные статические файлы (CSS, JS) из первого этапа сборки
COPY --from=node-builder /app/public/build ./public/build

# Создаём необходимые директории для Laravel (кэш, сессии, представления)
# Настраиваем права доступа для веб-сервера (www-data - стандартный пользователь nginx/php-fpm)
# 775 - права: владелец и группа могут читать/писать/выполнять, остальные только читать/выполнять
RUN mkdir -p storage/framework/{cache,sessions,testing,views} bootstrap/cache \
   && chown -R www-data:www-data storage bootstrap/cache \
   && chmod -R 775 storage bootstrap/cache

# Копируем кастомную конфигурацию nginx для обслуживания Laravel приложения
COPY docker/nginx.conf /etc/nginx/nginx.conf

# Копируем конфигурацию supervisor для управления несколькими процессами (nginx + php-fpm)
COPY docker/supervisord.conf /etc/supervisord.conf

# Копируем стартовый скрипт, который будет запускаться при старте контейнера
COPY docker/start.sh /start.sh
# Даём права на выполнение стартового скрипта
RUN chmod +x /start.sh

# Открываем порт 80 для HTTP трафика
EXPOSE 80

# Устанавливаем команду по умолчанию - запуск стартового скрипта
CMD ["/start.sh"]

------------------------------------------------------------------------------------------------------
Этот Dockerfile использует многоэтапную сборку (multi-stage build) для создания оптимизированного production образа Laravel приложения:
Первый этап собирает фронтенд ресурсы (JavaScript, CSS) используя Node.js
Второй этап подготавливает базовый PHP образ со всеми необходимыми расширениями
Третий этап создает финальный образ приложения, объединяя PHP код и собранный фронтенд
Такой подход позволяет исключить из финального образа инструменты сборки (Node.js, build-зависимости), значительно уменьшив его размер и повысив безопасность.
------------------------------------------------------------------------------------------------------
Этот файл — это инструкция для создания контейнера с вашим веб-приложением. Представьте, что это рецепт приготовления блюда, только вместо еды мы "готовим" готовое к работе приложение.
Что такое Docker и зачем он нужен?
Docker — это как универсальная коробка для программ. Вы кладете туда свое приложение со всем необходимым (операционная система, библиотеки, настройки), и эта коробка будет одинаково работать на любом компьютере — на вашем ноутбуке, на сервере компании или в облаке.
Что делает этот конкретный файл?
Представьте, что у вас есть веб-сайт, который состоит из двух частей:

Фронтенд — красивый интерфейс (кнопки, формы, анимации)
Бэкенд — логика работы сайта (обработка данных, работа с базой данных)

Шаг 1: Готовим красивую часть сайта
"Возьми компьютер с Node.js (программа для работы с JavaScript)
Скопируй исходники фронтенда
Собери красивые страницы (сожми картинки, объедини CSS файлы)
Сохрани результат"
Шаг 2: Готовим рабочую часть сайта
"Возьми компьютер с PHP (язык программирования для веб-сайтов)
Установи все нужные программы (для работы с картинками, базами данных)
Установи веб-сервер nginx (программа, которая показывает сайт людям)"
Шаг 3: Объединяем все вместе
"Возьми код сайта
Установи все PHP библиотеки
Добавь красивые страницы из шага 1
Настрой права доступа к файлам
Настрой веб-сервер
Запусти все это добро"
------------------------------------------------------------------------------------------------------